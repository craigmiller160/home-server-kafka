apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .Values.kafka.name }}
spec:
  replicas: 1
  selector:
    matchLabels:
      app: {{ .Values.kafka.name }}
  template:
    metadata:
      labels:
        app: {{ .Values.kafka.name }}
    spec:
      initContainers:
        - name: kafka-keystore-creator
          image: openjdk:19-slim
          imagePullPolicy: IfNotPresent
          command:
            - sh
            - -c
            - |
              cp /certs/tls.crt /keystores/kafka.keystore.pem &&
              cp /certs/tls.key /keystores/kafka.keystore.key &&
              cp /certs/ca.crt /keystores/kafka.truststore.pem
          volumeMounts:
            - mountPath: /certs
              name: {{ .Values.kafka.volumes.certs }}
            - mountPath: /keystores
              name: {{ .Values.kafka.volumes.keystores }}
      containers:
        - name: {{ .Values.kafka.name }}
          image: "bitnami/kafka:{{ .Values.kafka.version }}"
          imagePullPolicy: IfNotPresent
          ports:
            - containerPort: {{ .Values.kafka.networking.internal_port }}
          envFrom:
            - configMapRef:
                name: {{ .Values.kafka.configmap.primary }}
          env:
            - name: KAFKA_CONTROLLER_USER
              valueFrom:
                secretKeyRef:
                  key: username
                  name: {{ .Values.kafka.secrets.controller_user }}
            - name: KAFKA_CONTROLLER_PASSWORD
              valueFrom:
                secretKeyRef:
                  key: password
                  name: {{ .Values.kafka.secrets.controller_user }}
            - name: KAFKA_CLIENT_USERS
              valueFrom:
                secretKeyRef:
                  key: username
                  name: {{ .Values.kafka.secrets.super_user }}
            - name: KAFKA_CLIENT_PASSWORDS
              valueFrom:
                secretKeyRef:
                  key: password
                  name: {{ .Values.kafka.secrets.super_user }}
            - name: KAFKA_INTER_BROKER_USER
              valueFrom:
                secretKeyRef:
                  key: username
                  name: {{ .Values.kafka.secrets.broker_user }}
            - name: KAFKA_INTER_BROKER_PASSWORD
              valueFrom:
                secretKeyRef:
                  key: password
                  name: {{ .Values.kafka.secrets.broker_user }}
            - name: KAFKA_CFG_SUPER_USERS
              value: "User:$KAFKA_CLIENT_USERS;User:$KAFKA_CONTROLLER_USER;User:$KAFKA_INTER_BROKER_USER"
          volumeMounts:
            - mountPath: /bitnami/kafka
              name: {{ .Values.kafka.volumes.data }}
            - mountPath: /opt/bitnami/kafka/config/certs/
              name: {{ .Values.kafka.volumes.keystores }}
      volumes:
        - name: {{ .Values.kafka.volumes.data }}
          persistentVolumeClaim:
            claimName: {{ .Values.kafka.volumes.data }}
        - name: {{ .Values.kafka.volumes.certs }}
          secret:
            secretName: {{ .Values.kafka.secrets.certificate }}
        - name: {{ .Values.kafka.volumes.keystores }}
          emptyDir: {}